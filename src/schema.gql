scalar Day
scalar Date

interface Node {
  id: ID!
}

type Tag implements Node {
  id: ID!
  name: String!
  tagCount: Int!
}

type Stem implements Node {
  id: ID!
  createAt: Date!
  flowering: Boolean!
  title: String!
  tags: [Tag]!
  body: String!
}

type StemConnection {
  nodes: [Stem]!
  totalCount: Int!
}

type Leaf implements Node {
  id: ID!
  createAt: Date!
  title: String!
}

type LeafConnection {
  nodes: [Leaf]!
  totalCount: Int!
}

type Post implements Node {
  id: ID!
  day: Day!
  stems: StemConnection!
  leaves: LeafConnection!
}

input createStemInput {
  specifiedDay: Day
  parentID: ID
  title: String
  flowering: Boolean
  tags: [String]!
  body: String!
}

type Query {
  node(id: ID!): Node

  posts(limit: Int): [Post]
  post(id: ID!): Post

  tags(limit: Int): [Tag]
}

type Mutation {
  createStem(input: createStemInput!): Stem
}
